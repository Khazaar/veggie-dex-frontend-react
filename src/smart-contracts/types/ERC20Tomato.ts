/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumberish,
    BytesLike,
    FunctionFragment,
    Result,
    Interface,
    EventFragment,
} from "ethers";
import type { AddressLike } from "ethers/types/address";
import type { ContractRunner } from "ethers/types/providers";
import type { ContractMethod } from "ethers/types/contract";
import type { Listener } from "ethers/types/utils";
import type {
    TypedContractEvent,
    TypedDeferredTopicFilter,
    TypedEventLog,
    TypedListener,
    TypedContractMethod,
} from "./common";

export interface ERC20TomatoInterface extends Interface {
    getFunction(
        nameOrSignature:
            | "DEFAULT_ADMIN_ROLE"
            | "OWNER_ROLE"
            | "allowance"
            | "approve"
            | "balanceOf"
            | "burnAllTokens"
            | "decimals"
            | "decreaseAllowance"
            | "getMintLimitAmount"
            | "getMintLimitPeriodSeconds"
            | "getRoleAdmin"
            | "getRoleMember"
            | "getRoleMemberCount"
            | "getTokens"
            | "grantRole"
            | "hasRole"
            | "increaseAllowance"
            | "lastMint"
            | "mintedInPeriod"
            | "name"
            | "renounceRole"
            | "revokeRole"
            | "setMintLimitAmount"
            | "setMintLimitPeriodSeconds"
            | "symbol"
            | "totalSupply"
            | "transfer"
            | "transferFrom"
    ): FunctionFragment;

    getEvent(
        nameOrSignatureOrTopic:
            | "Approval"
            | "MintLimitAmountSet"
            | "MintLimitPeriodSecondsSet"
            | "MintRevertedAmount"
            | "MintRevertedPeriod"
            | "RoleAdminChanged"
            | "RoleGranted"
            | "RoleRevoked"
            | "Transfer"
    ): EventFragment;

    encodeFunctionData(
        functionFragment: "DEFAULT_ADMIN_ROLE",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "OWNER_ROLE",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "allowance",
        values: [AddressLike, AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "approve",
        values: [AddressLike, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "balanceOf",
        values: [AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "burnAllTokens",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "decimals",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "decreaseAllowance",
        values: [AddressLike, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getMintLimitAmount",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getMintLimitPeriodSeconds",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getRoleAdmin",
        values: [BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: "getRoleMember",
        values: [BytesLike, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getRoleMemberCount",
        values: [BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: "getTokens",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "grantRole",
        values: [BytesLike, AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "hasRole",
        values: [BytesLike, AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "increaseAllowance",
        values: [AddressLike, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "lastMint",
        values: [AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "mintedInPeriod",
        values: [AddressLike]
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "renounceRole",
        values: [BytesLike, AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "revokeRole",
        values: [BytesLike, AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "setMintLimitAmount",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "setMintLimitPeriodSeconds",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "totalSupply",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "transfer",
        values: [AddressLike, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "transferFrom",
        values: [AddressLike, AddressLike, BigNumberish]
    ): string;

    decodeFunctionResult(
        functionFragment: "DEFAULT_ADMIN_ROLE",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "OWNER_ROLE",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "allowance",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "balanceOf",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "burnAllTokens",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "decreaseAllowance",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMintLimitAmount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMintLimitPeriodSeconds",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getRoleAdmin",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getRoleMember",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getRoleMemberCount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTokens",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "grantRole",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "increaseAllowance",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "lastMint", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "mintedInPeriod",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "renounceRole",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "revokeRole",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setMintLimitAmount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setMintLimitPeriodSeconds",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "totalSupply",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "transferFrom",
        data: BytesLike
    ): Result;
}

export namespace ApprovalEvent {
    export type InputTuple = [
        owner: AddressLike,
        spender: AddressLike,
        value: BigNumberish
    ];
    export type OutputTuple = [owner: string, spender: string, value: bigint];
    export interface OutputObject {
        owner: string;
        spender: string;
        value: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace MintLimitAmountSetEvent {
    export type InputTuple = [mintLimitAmount: BigNumberish];
    export type OutputTuple = [mintLimitAmount: bigint];
    export interface OutputObject {
        mintLimitAmount: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace MintLimitPeriodSecondsSetEvent {
    export type InputTuple = [mintLimitPeriodSeconds: BigNumberish];
    export type OutputTuple = [mintLimitPeriodSeconds: bigint];
    export interface OutputObject {
        mintLimitPeriodSeconds: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace MintRevertedAmountEvent {
    export type InputTuple = [
        askedAmount: BigNumberish,
        mintLimitAmount: BigNumberish
    ];
    export type OutputTuple = [askedAmount: bigint, mintLimitAmount: bigint];
    export interface OutputObject {
        askedAmount: bigint;
        mintLimitAmount: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace MintRevertedPeriodEvent {
    export type InputTuple = [
        timePassedSeconds: BigNumberish,
        mintLimitPeriodSeconds: BigNumberish
    ];
    export type OutputTuple = [
        timePassedSeconds: bigint,
        mintLimitPeriodSeconds: bigint
    ];
    export interface OutputObject {
        timePassedSeconds: bigint;
        mintLimitPeriodSeconds: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace RoleAdminChangedEvent {
    export type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    export type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    export interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace RoleGrantedEvent {
    export type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    export type OutputTuple = [role: string, account: string, sender: string];
    export interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace RoleRevokedEvent {
    export type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    export type OutputTuple = [role: string, account: string, sender: string];
    export interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace TransferEvent {
    export type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        value: BigNumberish
    ];
    export type OutputTuple = [from: string, to: string, value: bigint];
    export interface OutputObject {
        from: string;
        to: string;
        value: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export interface ERC20Tomato extends BaseContract {
    connect(runner?: ContractRunner | null): BaseContract;
    attach(addressOrName: AddressLike): this;
    deployed(): Promise<this>;

    interface: ERC20TomatoInterface;

    queryFilter<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;

    on<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        listener: TypedListener<TCEvent>
    ): Promise<this>;
    on<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        listener: TypedListener<TCEvent>
    ): Promise<this>;

    once<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        listener: TypedListener<TCEvent>
    ): Promise<this>;
    once<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        listener: TypedListener<TCEvent>
    ): Promise<this>;

    listeners<TCEvent extends TypedContractEvent>(
        event: TCEvent
    ): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(
        event?: TCEvent
    ): Promise<this>;

    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

    OWNER_ROLE: TypedContractMethod<[], [string], "view">;

    allowance: TypedContractMethod<
        [owner: AddressLike, spender: AddressLike],
        [bigint],
        "view"
    >;

    approve: TypedContractMethod<
        [spender: AddressLike, amount: BigNumberish],
        [boolean],
        "nonpayable"
    >;

    balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

    burnAllTokens: TypedContractMethod<[], [void], "nonpayable">;

    decimals: TypedContractMethod<[], [bigint], "view">;

    decreaseAllowance: TypedContractMethod<
        [spender: AddressLike, subtractedValue: BigNumberish],
        [boolean],
        "nonpayable"
    >;

    getMintLimitAmount: TypedContractMethod<[], [bigint], "view">;

    getMintLimitPeriodSeconds: TypedContractMethod<[], [bigint], "view">;

    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

    getRoleMember: TypedContractMethod<
        [role: BytesLike, index: BigNumberish],
        [string],
        "view"
    >;

    getRoleMemberCount: TypedContractMethod<
        [role: BytesLike],
        [bigint],
        "view"
    >;

    getTokens: TypedContractMethod<
        [askedAmount: BigNumberish],
        [void],
        "nonpayable"
    >;

    grantRole: TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [void],
        "nonpayable"
    >;

    hasRole: TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [boolean],
        "view"
    >;

    increaseAllowance: TypedContractMethod<
        [spender: AddressLike, addedValue: BigNumberish],
        [boolean],
        "nonpayable"
    >;

    lastMint: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

    mintedInPeriod: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

    name: TypedContractMethod<[], [string], "view">;

    renounceRole: TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [void],
        "nonpayable"
    >;

    revokeRole: TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [void],
        "nonpayable"
    >;

    setMintLimitAmount: TypedContractMethod<
        [mintLimitAmount: BigNumberish],
        [void],
        "nonpayable"
    >;

    setMintLimitPeriodSeconds: TypedContractMethod<
        [mintLimitPeriodSeconds: BigNumberish],
        [void],
        "nonpayable"
    >;

    symbol: TypedContractMethod<[], [string], "view">;

    totalSupply: TypedContractMethod<[], [bigint], "view">;

    transfer: TypedContractMethod<
        [to: AddressLike, amount: BigNumberish],
        [boolean],
        "nonpayable"
    >;

    transferFrom: TypedContractMethod<
        [from: AddressLike, to: AddressLike, amount: BigNumberish],
        [boolean],
        "nonpayable"
    >;

    getFunction<T extends ContractMethod = ContractMethod>(
        key: string | FunctionFragment
    ): T;

    getFunction(
        nameOrSignature: "DEFAULT_ADMIN_ROLE"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
        nameOrSignature: "OWNER_ROLE"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
        nameOrSignature: "allowance"
    ): TypedContractMethod<
        [owner: AddressLike, spender: AddressLike],
        [bigint],
        "view"
    >;
    getFunction(
        nameOrSignature: "approve"
    ): TypedContractMethod<
        [spender: AddressLike, amount: BigNumberish],
        [boolean],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "balanceOf"
    ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getFunction(
        nameOrSignature: "burnAllTokens"
    ): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(
        nameOrSignature: "decimals"
    ): TypedContractMethod<[], [bigint], "view">;
    getFunction(
        nameOrSignature: "decreaseAllowance"
    ): TypedContractMethod<
        [spender: AddressLike, subtractedValue: BigNumberish],
        [boolean],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "getMintLimitAmount"
    ): TypedContractMethod<[], [bigint], "view">;
    getFunction(
        nameOrSignature: "getMintLimitPeriodSeconds"
    ): TypedContractMethod<[], [bigint], "view">;
    getFunction(
        nameOrSignature: "getRoleAdmin"
    ): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(
        nameOrSignature: "getRoleMember"
    ): TypedContractMethod<
        [role: BytesLike, index: BigNumberish],
        [string],
        "view"
    >;
    getFunction(
        nameOrSignature: "getRoleMemberCount"
    ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
    getFunction(
        nameOrSignature: "getTokens"
    ): TypedContractMethod<[askedAmount: BigNumberish], [void], "nonpayable">;
    getFunction(
        nameOrSignature: "grantRole"
    ): TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [void],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "hasRole"
    ): TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [boolean],
        "view"
    >;
    getFunction(
        nameOrSignature: "increaseAllowance"
    ): TypedContractMethod<
        [spender: AddressLike, addedValue: BigNumberish],
        [boolean],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "lastMint"
    ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(
        nameOrSignature: "mintedInPeriod"
    ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(
        nameOrSignature: "name"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
        nameOrSignature: "renounceRole"
    ): TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [void],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "revokeRole"
    ): TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [void],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "setMintLimitAmount"
    ): TypedContractMethod<
        [mintLimitAmount: BigNumberish],
        [void],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "setMintLimitPeriodSeconds"
    ): TypedContractMethod<
        [mintLimitPeriodSeconds: BigNumberish],
        [void],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "symbol"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
        nameOrSignature: "totalSupply"
    ): TypedContractMethod<[], [bigint], "view">;
    getFunction(
        nameOrSignature: "transfer"
    ): TypedContractMethod<
        [to: AddressLike, amount: BigNumberish],
        [boolean],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "transferFrom"
    ): TypedContractMethod<
        [from: AddressLike, to: AddressLike, amount: BigNumberish],
        [boolean],
        "nonpayable"
    >;

    getEvent(
        key: "Approval"
    ): TypedContractEvent<
        ApprovalEvent.InputTuple,
        ApprovalEvent.OutputTuple,
        ApprovalEvent.OutputObject
    >;
    getEvent(
        key: "MintLimitAmountSet"
    ): TypedContractEvent<
        MintLimitAmountSetEvent.InputTuple,
        MintLimitAmountSetEvent.OutputTuple,
        MintLimitAmountSetEvent.OutputObject
    >;
    getEvent(
        key: "MintLimitPeriodSecondsSet"
    ): TypedContractEvent<
        MintLimitPeriodSecondsSetEvent.InputTuple,
        MintLimitPeriodSecondsSetEvent.OutputTuple,
        MintLimitPeriodSecondsSetEvent.OutputObject
    >;
    getEvent(
        key: "MintRevertedAmount"
    ): TypedContractEvent<
        MintRevertedAmountEvent.InputTuple,
        MintRevertedAmountEvent.OutputTuple,
        MintRevertedAmountEvent.OutputObject
    >;
    getEvent(
        key: "MintRevertedPeriod"
    ): TypedContractEvent<
        MintRevertedPeriodEvent.InputTuple,
        MintRevertedPeriodEvent.OutputTuple,
        MintRevertedPeriodEvent.OutputObject
    >;
    getEvent(
        key: "RoleAdminChanged"
    ): TypedContractEvent<
        RoleAdminChangedEvent.InputTuple,
        RoleAdminChangedEvent.OutputTuple,
        RoleAdminChangedEvent.OutputObject
    >;
    getEvent(
        key: "RoleGranted"
    ): TypedContractEvent<
        RoleGrantedEvent.InputTuple,
        RoleGrantedEvent.OutputTuple,
        RoleGrantedEvent.OutputObject
    >;
    getEvent(
        key: "RoleRevoked"
    ): TypedContractEvent<
        RoleRevokedEvent.InputTuple,
        RoleRevokedEvent.OutputTuple,
        RoleRevokedEvent.OutputObject
    >;
    getEvent(
        key: "Transfer"
    ): TypedContractEvent<
        TransferEvent.InputTuple,
        TransferEvent.OutputTuple,
        TransferEvent.OutputObject
    >;

    filters: {
        "Approval(address,address,uint256)": TypedContractEvent<
            ApprovalEvent.InputTuple,
            ApprovalEvent.OutputTuple,
            ApprovalEvent.OutputObject
        >;
        Approval: TypedContractEvent<
            ApprovalEvent.InputTuple,
            ApprovalEvent.OutputTuple,
            ApprovalEvent.OutputObject
        >;

        "MintLimitAmountSet(uint256)": TypedContractEvent<
            MintLimitAmountSetEvent.InputTuple,
            MintLimitAmountSetEvent.OutputTuple,
            MintLimitAmountSetEvent.OutputObject
        >;
        MintLimitAmountSet: TypedContractEvent<
            MintLimitAmountSetEvent.InputTuple,
            MintLimitAmountSetEvent.OutputTuple,
            MintLimitAmountSetEvent.OutputObject
        >;

        "MintLimitPeriodSecondsSet(uint256)": TypedContractEvent<
            MintLimitPeriodSecondsSetEvent.InputTuple,
            MintLimitPeriodSecondsSetEvent.OutputTuple,
            MintLimitPeriodSecondsSetEvent.OutputObject
        >;
        MintLimitPeriodSecondsSet: TypedContractEvent<
            MintLimitPeriodSecondsSetEvent.InputTuple,
            MintLimitPeriodSecondsSetEvent.OutputTuple,
            MintLimitPeriodSecondsSetEvent.OutputObject
        >;

        "MintRevertedAmount(uint256,uint256)": TypedContractEvent<
            MintRevertedAmountEvent.InputTuple,
            MintRevertedAmountEvent.OutputTuple,
            MintRevertedAmountEvent.OutputObject
        >;
        MintRevertedAmount: TypedContractEvent<
            MintRevertedAmountEvent.InputTuple,
            MintRevertedAmountEvent.OutputTuple,
            MintRevertedAmountEvent.OutputObject
        >;

        "MintRevertedPeriod(uint256,uint256)": TypedContractEvent<
            MintRevertedPeriodEvent.InputTuple,
            MintRevertedPeriodEvent.OutputTuple,
            MintRevertedPeriodEvent.OutputObject
        >;
        MintRevertedPeriod: TypedContractEvent<
            MintRevertedPeriodEvent.InputTuple,
            MintRevertedPeriodEvent.OutputTuple,
            MintRevertedPeriodEvent.OutputObject
        >;

        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
            RoleAdminChangedEvent.InputTuple,
            RoleAdminChangedEvent.OutputTuple,
            RoleAdminChangedEvent.OutputObject
        >;
        RoleAdminChanged: TypedContractEvent<
            RoleAdminChangedEvent.InputTuple,
            RoleAdminChangedEvent.OutputTuple,
            RoleAdminChangedEvent.OutputObject
        >;

        "RoleGranted(bytes32,address,address)": TypedContractEvent<
            RoleGrantedEvent.InputTuple,
            RoleGrantedEvent.OutputTuple,
            RoleGrantedEvent.OutputObject
        >;
        RoleGranted: TypedContractEvent<
            RoleGrantedEvent.InputTuple,
            RoleGrantedEvent.OutputTuple,
            RoleGrantedEvent.OutputObject
        >;

        "RoleRevoked(bytes32,address,address)": TypedContractEvent<
            RoleRevokedEvent.InputTuple,
            RoleRevokedEvent.OutputTuple,
            RoleRevokedEvent.OutputObject
        >;
        RoleRevoked: TypedContractEvent<
            RoleRevokedEvent.InputTuple,
            RoleRevokedEvent.OutputTuple,
            RoleRevokedEvent.OutputObject
        >;

        "Transfer(address,address,uint256)": TypedContractEvent<
            TransferEvent.InputTuple,
            TransferEvent.OutputTuple,
            TransferEvent.OutputObject
        >;
        Transfer: TypedContractEvent<
            TransferEvent.InputTuple,
            TransferEvent.OutputTuple,
            TransferEvent.OutputObject
        >;
    };
}
