/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumberish,
    BytesLike,
    FunctionFragment,
    Result,
    Interface,
    EventFragment,
} from "ethers";
import type { AddressLike } from "ethers/types/address";
import type { ContractRunner } from "ethers/types/providers";
import type { ContractMethod } from "ethers/types/contract";
import type { Listener } from "ethers/types/utils";
import type {
    TypedContractEvent,
    TypedDeferredTopicFilter,
    TypedEventLog,
    TypedListener,
    TypedContractMethod,
} from "./common";

export interface PancakeRouter_modInterface extends Interface {
    getFunction(
        nameOrSignature:
            | "ADMIN_ROLE"
            | "DEFAULT_ADMIN_ROLE"
            | "OWNER_ROLE"
            | "WETH"
            | "addAdminAddress"
            | "addLiquidity"
            | "factory"
            | "getAmountIn"
            | "getAmountOut"
            | "getAmountsIn"
            | "getAmountsOut"
            | "getLsrMinBalance"
            | "getOwnerAddress"
            | "getRoleAdmin"
            | "getRoleMember"
            | "getRoleMemberCount"
            | "getSwapFee"
            | "grantRole"
            | "hasRole"
            | "isAdmin"
            | "quote"
            | "removeLiquidity"
            | "removeLiquidityWithPermit"
            | "renounceRole"
            | "revokeAdminAddress"
            | "revokeRole"
            | "setLsrMinBalance"
            | "setSwapFee"
            | "swapExactTokensForTokens"
            | "swapExactTokensForTokensSupportingFeeOnTransferTokens"
            | "swapTokensForExactTokens"
            | "withdrawFees"
    ): FunctionFragment;

    getEvent(
        nameOrSignatureOrTopic:
            | "AddLiquidity"
            | "FeeCharged"
            | "RoleAdminChanged"
            | "RoleGranted"
            | "RoleRevoked"
            | "SetLsrMinBalance"
            | "SetSwapFee"
            | "WithdrawFees"
    ): EventFragment;

    encodeFunctionData(
        functionFragment: "ADMIN_ROLE",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "DEFAULT_ADMIN_ROLE",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "OWNER_ROLE",
        values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "addAdminAddress",
        values: [AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "addLiquidity",
        values: [
            AddressLike,
            AddressLike,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            AddressLike,
            BigNumberish
        ]
    ): string;
    encodeFunctionData(functionFragment: "factory", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "getAmountIn",
        values: [BigNumberish, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getAmountOut",
        values: [BigNumberish, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getAmountsIn",
        values: [BigNumberish, AddressLike[]]
    ): string;
    encodeFunctionData(
        functionFragment: "getAmountsOut",
        values: [BigNumberish, AddressLike[]]
    ): string;
    encodeFunctionData(
        functionFragment: "getLsrMinBalance",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getOwnerAddress",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getRoleAdmin",
        values: [BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: "getRoleMember",
        values: [BytesLike, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getRoleMemberCount",
        values: [BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: "getSwapFee",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "grantRole",
        values: [BytesLike, AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "hasRole",
        values: [BytesLike, AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "isAdmin",
        values: [AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "quote",
        values: [BigNumberish, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "removeLiquidity",
        values: [
            AddressLike,
            AddressLike,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            AddressLike,
            BigNumberish
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "removeLiquidityWithPermit",
        values: [
            AddressLike,
            AddressLike,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            AddressLike,
            BigNumberish,
            boolean,
            BigNumberish,
            BytesLike,
            BytesLike
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "renounceRole",
        values: [BytesLike, AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "revokeAdminAddress",
        values: [AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "revokeRole",
        values: [BytesLike, AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: "setLsrMinBalance",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "setSwapFee",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "swapExactTokensForTokens",
        values: [
            BigNumberish,
            BigNumberish,
            AddressLike[],
            AddressLike,
            BigNumberish
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
        values: [
            BigNumberish,
            BigNumberish,
            AddressLike[],
            AddressLike,
            BigNumberish
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "swapTokensForExactTokens",
        values: [
            BigNumberish,
            BigNumberish,
            AddressLike[],
            AddressLike,
            BigNumberish
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "withdrawFees",
        values: [AddressLike, BigNumberish]
    ): string;

    decodeFunctionResult(
        functionFragment: "ADMIN_ROLE",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "DEFAULT_ADMIN_ROLE",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "OWNER_ROLE",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "addAdminAddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "addLiquidity",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "getAmountIn",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getAmountOut",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getAmountsIn",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getAmountsOut",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getLsrMinBalance",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getOwnerAddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getRoleAdmin",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getRoleMember",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getRoleMemberCount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getSwapFee",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "grantRole",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "removeLiquidity",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "removeLiquidityWithPermit",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "renounceRole",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "revokeAdminAddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "revokeRole",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setLsrMinBalance",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "setSwapFee",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "swapExactTokensForTokens",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "swapTokensForExactTokens",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "withdrawFees",
        data: BytesLike
    ): Result;
}

export namespace AddLiquidityEvent {
    export type InputTuple = [amountA: BigNumberish, amountB: BigNumberish];
    export type OutputTuple = [amountA: bigint, amountB: bigint];
    export interface OutputObject {
        amountA: bigint;
        amountB: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace FeeChargedEvent {
    export type InputTuple = [_token: AddressLike, _fee: BigNumberish];
    export type OutputTuple = [_token: string, _fee: bigint];
    export interface OutputObject {
        _token: string;
        _fee: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace RoleAdminChangedEvent {
    export type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    export type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    export interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace RoleGrantedEvent {
    export type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    export type OutputTuple = [role: string, account: string, sender: string];
    export interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace RoleRevokedEvent {
    export type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    export type OutputTuple = [role: string, account: string, sender: string];
    export interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace SetLsrMinBalanceEvent {
    export type InputTuple = [_lsrMinBalance: BigNumberish];
    export type OutputTuple = [_lsrMinBalance: bigint];
    export interface OutputObject {
        _lsrMinBalance: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace SetSwapFeeEvent {
    export type InputTuple = [_swapFee: BigNumberish];
    export type OutputTuple = [_swapFee: bigint];
    export interface OutputObject {
        _swapFee: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace WithdrawFeesEvent {
    export type InputTuple = [_token: AddressLike, amount: BigNumberish];
    export type OutputTuple = [_token: string, amount: bigint];
    export interface OutputObject {
        _token: string;
        amount: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
}

export interface PancakeRouter_mod extends BaseContract {
    connect(runner?: ContractRunner | null): BaseContract;
    attach(addressOrName: AddressLike): this;
    deployed(): Promise<this>;

    interface: PancakeRouter_modInterface;

    queryFilter<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;

    on<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        listener: TypedListener<TCEvent>
    ): Promise<this>;
    on<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        listener: TypedListener<TCEvent>
    ): Promise<this>;

    once<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        listener: TypedListener<TCEvent>
    ): Promise<this>;
    once<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        listener: TypedListener<TCEvent>
    ): Promise<this>;

    listeners<TCEvent extends TypedContractEvent>(
        event: TCEvent
    ): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(
        event?: TCEvent
    ): Promise<this>;

    ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

    OWNER_ROLE: TypedContractMethod<[], [string], "view">;

    WETH: TypedContractMethod<[], [string], "view">;

    addAdminAddress: TypedContractMethod<
        [_adminAddress: AddressLike],
        [void],
        "nonpayable"
    >;

    addLiquidity: TypedContractMethod<
        [
            tokenA: AddressLike,
            tokenB: AddressLike,
            amountADesired: BigNumberish,
            amountBDesired: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: AddressLike,
            deadline: BigNumberish
        ],
        [
            [bigint, bigint, bigint] & {
                amountA: bigint;
                amountB: bigint;
                liquidity: bigint;
            }
        ],
        "nonpayable"
    >;

    factory: TypedContractMethod<[], [string], "view">;

    getAmountIn: TypedContractMethod<
        [
            amountOut: BigNumberish,
            reserveIn: BigNumberish,
            reserveOut: BigNumberish
        ],
        [bigint],
        "view"
    >;

    getAmountOut: TypedContractMethod<
        [
            amountIn: BigNumberish,
            reserveIn: BigNumberish,
            reserveOut: BigNumberish
        ],
        [bigint],
        "view"
    >;

    getAmountsIn: TypedContractMethod<
        [amountOut: BigNumberish, path: AddressLike[]],
        [bigint[]],
        "view"
    >;

    getAmountsOut: TypedContractMethod<
        [amountIn: BigNumberish, path: AddressLike[]],
        [bigint[]],
        "view"
    >;

    getLsrMinBalance: TypedContractMethod<[], [bigint], "view">;

    getOwnerAddress: TypedContractMethod<[], [string], "view">;

    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

    getRoleMember: TypedContractMethod<
        [role: BytesLike, index: BigNumberish],
        [string],
        "view"
    >;

    getRoleMemberCount: TypedContractMethod<
        [role: BytesLike],
        [bigint],
        "view"
    >;

    getSwapFee: TypedContractMethod<[], [bigint], "view">;

    grantRole: TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [void],
        "nonpayable"
    >;

    hasRole: TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [boolean],
        "view"
    >;

    isAdmin: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

    quote: TypedContractMethod<
        [amountA: BigNumberish, reserveA: BigNumberish, reserveB: BigNumberish],
        [bigint],
        "view"
    >;

    removeLiquidity: TypedContractMethod<
        [
            tokenA: AddressLike,
            tokenB: AddressLike,
            liquidity: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: AddressLike,
            deadline: BigNumberish
        ],
        [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
        "nonpayable"
    >;

    removeLiquidityWithPermit: TypedContractMethod<
        [
            tokenA: AddressLike,
            tokenB: AddressLike,
            liquidity: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: AddressLike,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike
        ],
        [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
        "nonpayable"
    >;

    renounceRole: TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [void],
        "nonpayable"
    >;

    revokeAdminAddress: TypedContractMethod<
        [_adminAddress: AddressLike],
        [void],
        "nonpayable"
    >;

    revokeRole: TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [void],
        "nonpayable"
    >;

    setLsrMinBalance: TypedContractMethod<
        [_lsrMinBalance: BigNumberish],
        [void],
        "nonpayable"
    >;

    setSwapFee: TypedContractMethod<
        [_swapFee: BigNumberish],
        [void],
        "nonpayable"
    >;

    swapExactTokensForTokens: TypedContractMethod<
        [
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: AddressLike[],
            to: AddressLike,
            deadline: BigNumberish
        ],
        [bigint[]],
        "payable"
    >;

    swapExactTokensForTokensSupportingFeeOnTransferTokens: TypedContractMethod<
        [
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: AddressLike[],
            to: AddressLike,
            deadline: BigNumberish
        ],
        [void],
        "payable"
    >;

    swapTokensForExactTokens: TypedContractMethod<
        [
            amountOut: BigNumberish,
            amountInMax: BigNumberish,
            path: AddressLike[],
            to: AddressLike,
            deadline: BigNumberish
        ],
        [bigint[]],
        "nonpayable"
    >;

    withdrawFees: TypedContractMethod<
        [_token: AddressLike, amount: BigNumberish],
        [void],
        "nonpayable"
    >;

    getFunction<T extends ContractMethod = ContractMethod>(
        key: string | FunctionFragment
    ): T;

    getFunction(
        nameOrSignature: "ADMIN_ROLE"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
        nameOrSignature: "DEFAULT_ADMIN_ROLE"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
        nameOrSignature: "OWNER_ROLE"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
        nameOrSignature: "WETH"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
        nameOrSignature: "addAdminAddress"
    ): TypedContractMethod<[_adminAddress: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "addLiquidity"): TypedContractMethod<
        [
            tokenA: AddressLike,
            tokenB: AddressLike,
            amountADesired: BigNumberish,
            amountBDesired: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: AddressLike,
            deadline: BigNumberish
        ],
        [
            [bigint, bigint, bigint] & {
                amountA: bigint;
                amountB: bigint;
                liquidity: bigint;
            }
        ],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "factory"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
        nameOrSignature: "getAmountIn"
    ): TypedContractMethod<
        [
            amountOut: BigNumberish,
            reserveIn: BigNumberish,
            reserveOut: BigNumberish
        ],
        [bigint],
        "view"
    >;
    getFunction(
        nameOrSignature: "getAmountOut"
    ): TypedContractMethod<
        [
            amountIn: BigNumberish,
            reserveIn: BigNumberish,
            reserveOut: BigNumberish
        ],
        [bigint],
        "view"
    >;
    getFunction(
        nameOrSignature: "getAmountsIn"
    ): TypedContractMethod<
        [amountOut: BigNumberish, path: AddressLike[]],
        [bigint[]],
        "view"
    >;
    getFunction(
        nameOrSignature: "getAmountsOut"
    ): TypedContractMethod<
        [amountIn: BigNumberish, path: AddressLike[]],
        [bigint[]],
        "view"
    >;
    getFunction(
        nameOrSignature: "getLsrMinBalance"
    ): TypedContractMethod<[], [bigint], "view">;
    getFunction(
        nameOrSignature: "getOwnerAddress"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
        nameOrSignature: "getRoleAdmin"
    ): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(
        nameOrSignature: "getRoleMember"
    ): TypedContractMethod<
        [role: BytesLike, index: BigNumberish],
        [string],
        "view"
    >;
    getFunction(
        nameOrSignature: "getRoleMemberCount"
    ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
    getFunction(
        nameOrSignature: "getSwapFee"
    ): TypedContractMethod<[], [bigint], "view">;
    getFunction(
        nameOrSignature: "grantRole"
    ): TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [void],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "hasRole"
    ): TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [boolean],
        "view"
    >;
    getFunction(
        nameOrSignature: "isAdmin"
    ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
    getFunction(
        nameOrSignature: "quote"
    ): TypedContractMethod<
        [amountA: BigNumberish, reserveA: BigNumberish, reserveB: BigNumberish],
        [bigint],
        "view"
    >;
    getFunction(
        nameOrSignature: "removeLiquidity"
    ): TypedContractMethod<
        [
            tokenA: AddressLike,
            tokenB: AddressLike,
            liquidity: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: AddressLike,
            deadline: BigNumberish
        ],
        [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "removeLiquidityWithPermit"
    ): TypedContractMethod<
        [
            tokenA: AddressLike,
            tokenB: AddressLike,
            liquidity: BigNumberish,
            amountAMin: BigNumberish,
            amountBMin: BigNumberish,
            to: AddressLike,
            deadline: BigNumberish,
            approveMax: boolean,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike
        ],
        [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "renounceRole"
    ): TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [void],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "revokeAdminAddress"
    ): TypedContractMethod<[_adminAddress: AddressLike], [void], "nonpayable">;
    getFunction(
        nameOrSignature: "revokeRole"
    ): TypedContractMethod<
        [role: BytesLike, account: AddressLike],
        [void],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "setLsrMinBalance"
    ): TypedContractMethod<
        [_lsrMinBalance: BigNumberish],
        [void],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "setSwapFee"
    ): TypedContractMethod<[_swapFee: BigNumberish], [void], "nonpayable">;
    getFunction(
        nameOrSignature: "swapExactTokensForTokens"
    ): TypedContractMethod<
        [
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: AddressLike[],
            to: AddressLike,
            deadline: BigNumberish
        ],
        [bigint[]],
        "payable"
    >;
    getFunction(
        nameOrSignature: "swapExactTokensForTokensSupportingFeeOnTransferTokens"
    ): TypedContractMethod<
        [
            amountIn: BigNumberish,
            amountOutMin: BigNumberish,
            path: AddressLike[],
            to: AddressLike,
            deadline: BigNumberish
        ],
        [void],
        "payable"
    >;
    getFunction(
        nameOrSignature: "swapTokensForExactTokens"
    ): TypedContractMethod<
        [
            amountOut: BigNumberish,
            amountInMax: BigNumberish,
            path: AddressLike[],
            to: AddressLike,
            deadline: BigNumberish
        ],
        [bigint[]],
        "nonpayable"
    >;
    getFunction(
        nameOrSignature: "withdrawFees"
    ): TypedContractMethod<
        [_token: AddressLike, amount: BigNumberish],
        [void],
        "nonpayable"
    >;

    getEvent(
        key: "AddLiquidity"
    ): TypedContractEvent<
        AddLiquidityEvent.InputTuple,
        AddLiquidityEvent.OutputTuple,
        AddLiquidityEvent.OutputObject
    >;
    getEvent(
        key: "FeeCharged"
    ): TypedContractEvent<
        FeeChargedEvent.InputTuple,
        FeeChargedEvent.OutputTuple,
        FeeChargedEvent.OutputObject
    >;
    getEvent(
        key: "RoleAdminChanged"
    ): TypedContractEvent<
        RoleAdminChangedEvent.InputTuple,
        RoleAdminChangedEvent.OutputTuple,
        RoleAdminChangedEvent.OutputObject
    >;
    getEvent(
        key: "RoleGranted"
    ): TypedContractEvent<
        RoleGrantedEvent.InputTuple,
        RoleGrantedEvent.OutputTuple,
        RoleGrantedEvent.OutputObject
    >;
    getEvent(
        key: "RoleRevoked"
    ): TypedContractEvent<
        RoleRevokedEvent.InputTuple,
        RoleRevokedEvent.OutputTuple,
        RoleRevokedEvent.OutputObject
    >;
    getEvent(
        key: "SetLsrMinBalance"
    ): TypedContractEvent<
        SetLsrMinBalanceEvent.InputTuple,
        SetLsrMinBalanceEvent.OutputTuple,
        SetLsrMinBalanceEvent.OutputObject
    >;
    getEvent(
        key: "SetSwapFee"
    ): TypedContractEvent<
        SetSwapFeeEvent.InputTuple,
        SetSwapFeeEvent.OutputTuple,
        SetSwapFeeEvent.OutputObject
    >;
    getEvent(
        key: "WithdrawFees"
    ): TypedContractEvent<
        WithdrawFeesEvent.InputTuple,
        WithdrawFeesEvent.OutputTuple,
        WithdrawFeesEvent.OutputObject
    >;

    filters: {
        "AddLiquidity(uint256,uint256)": TypedContractEvent<
            AddLiquidityEvent.InputTuple,
            AddLiquidityEvent.OutputTuple,
            AddLiquidityEvent.OutputObject
        >;
        AddLiquidity: TypedContractEvent<
            AddLiquidityEvent.InputTuple,
            AddLiquidityEvent.OutputTuple,
            AddLiquidityEvent.OutputObject
        >;

        "FeeCharged(address,uint256)": TypedContractEvent<
            FeeChargedEvent.InputTuple,
            FeeChargedEvent.OutputTuple,
            FeeChargedEvent.OutputObject
        >;
        FeeCharged: TypedContractEvent<
            FeeChargedEvent.InputTuple,
            FeeChargedEvent.OutputTuple,
            FeeChargedEvent.OutputObject
        >;

        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
            RoleAdminChangedEvent.InputTuple,
            RoleAdminChangedEvent.OutputTuple,
            RoleAdminChangedEvent.OutputObject
        >;
        RoleAdminChanged: TypedContractEvent<
            RoleAdminChangedEvent.InputTuple,
            RoleAdminChangedEvent.OutputTuple,
            RoleAdminChangedEvent.OutputObject
        >;

        "RoleGranted(bytes32,address,address)": TypedContractEvent<
            RoleGrantedEvent.InputTuple,
            RoleGrantedEvent.OutputTuple,
            RoleGrantedEvent.OutputObject
        >;
        RoleGranted: TypedContractEvent<
            RoleGrantedEvent.InputTuple,
            RoleGrantedEvent.OutputTuple,
            RoleGrantedEvent.OutputObject
        >;

        "RoleRevoked(bytes32,address,address)": TypedContractEvent<
            RoleRevokedEvent.InputTuple,
            RoleRevokedEvent.OutputTuple,
            RoleRevokedEvent.OutputObject
        >;
        RoleRevoked: TypedContractEvent<
            RoleRevokedEvent.InputTuple,
            RoleRevokedEvent.OutputTuple,
            RoleRevokedEvent.OutputObject
        >;

        "SetLsrMinBalance(uint256)": TypedContractEvent<
            SetLsrMinBalanceEvent.InputTuple,
            SetLsrMinBalanceEvent.OutputTuple,
            SetLsrMinBalanceEvent.OutputObject
        >;
        SetLsrMinBalance: TypedContractEvent<
            SetLsrMinBalanceEvent.InputTuple,
            SetLsrMinBalanceEvent.OutputTuple,
            SetLsrMinBalanceEvent.OutputObject
        >;

        "SetSwapFee(uint256)": TypedContractEvent<
            SetSwapFeeEvent.InputTuple,
            SetSwapFeeEvent.OutputTuple,
            SetSwapFeeEvent.OutputObject
        >;
        SetSwapFee: TypedContractEvent<
            SetSwapFeeEvent.InputTuple,
            SetSwapFeeEvent.OutputTuple,
            SetSwapFeeEvent.OutputObject
        >;

        "WithdrawFees(address,uint256)": TypedContractEvent<
            WithdrawFeesEvent.InputTuple,
            WithdrawFeesEvent.OutputTuple,
            WithdrawFeesEvent.OutputObject
        >;
        WithdrawFees: TypedContractEvent<
            WithdrawFeesEvent.InputTuple,
            WithdrawFeesEvent.OutputTuple,
            WithdrawFeesEvent.OutputObject
        >;
    };
}
